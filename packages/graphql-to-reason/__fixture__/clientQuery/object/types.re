/* Generated by Reason Relay Compiler, PLEASE EDIT WITH CARE */

type a_b_B = {
  id: string,
  iii: option(int),
};

type a_A = {
  id: string,
  ii: option(int),
  b: a_b_B,
  ff: float,
};

type c_C = {
  id: string,
  ss: option(string),
};

type queryResponse = {
  i: int,
  a: option(a_A),
  s: option(string),
  c: c_C,
};

[@bs.deriving abstract]
type variablesType = {
  j: int,
  ss: option(string),
};

type queryVars = {
  j: int,
  ss: option(string),
};

let encodeVariables: queryVars => variablesType = (vars) => variablesType(~j=vars.j,~ss=vars.ss);

type schemaQueryResponse = SchemaTypes.queryResponse;
let decodeResponse = SchemaTypes.decodeQueryResponse;